<!DOCTYPE html>
<html lang="en">
<head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type" />
    <meta content="utf-8" http-equiv="encoding" />
    <title>Vis Network | Other | Saving and Loading Networks</title>

    <style type="text/css">
        body {
            font: 10pt sans;
        }

        #mynetwork {
            float: left;
            width: 600px;
            height: 600px;
            margin: 5px;
            border: 1px solid lightgray;
        }

        #config {
            float: left;
            width: 400px;
            height: 600px;
        }

        #input_output {
            height: 10%;
            width: 15%;
        }

        p {
            font-size: 16px;
            max-width: 700px;
        }
    </style>

    <script type="text/javascript"
            src="../../../standalone/umd/vis-network.min.js"></script>

    <script type="text/javascript"
            src="https://unpkg.com/alea@1.0.0/alea.js"></script>
    <script type="text/javascript" src="../exampleUtil.js"></script>
</head>

<body>


    <div id="mynetwork"></div>

    <div>
        <textarea id="input_output"></textarea>
        <input type="button"
               id="import_button"
               onclick="importNetwork()"
               value="import" />
        <input type="button"
               id="export_button"
               onclick="exportNetwork()"
               value="export" />
        <input type="button"
               id="destroy_button"
               onclick="destroyNetwork()"
               value="destroy" />
    </div>

    <script type="text/javascript">
      var network;
      var container;
      var exportArea;
      var importButton;
      var exportButton;

      function init() {
        container = document.getElementById("mynetwork");
        exportArea = document.getElementById("input_output");
        importButton = document.getElementById("import_button");
        exportButton = document.getElementById("export_button");

        draw();
      }

      function addConnections(elem, index) {
        // need to replace this with a tree of the network, then get child direct children of the element
        elem.connections = network.getConnectedNodes(index);
      }

      function destroyNetwork() {
        //network.destroy();
      }

      function clearOutputArea() {
        exportArea.value = "";
      }

      function draw() {
        // create a network of nodes
        var data = getScaleFreeNetwork(5);

        network = new vis.Network(container, data, {
          manipulation: { enabled: true },
        });

        clearOutputArea();
      }

      function exportNetwork() {
        clearOutputArea();

        var nodes = objectToArray(network.getPositions());

        nodes.forEach(addConnections);

        // pretty print node data
        var exportValue = JSON.stringify(nodes, undefined, 2);

        exportArea.value = exportValue;

        resizeExportArea();
      }

      function importNetwork() {
        var inputValue = exportArea.value;
        var inputData = JSON.parse(inputValue);

        var data = {
          nodes: getNodeData(inputData),
          edges: getEdgeData(inputData),
        };

        network = new vis.Network(container, data, {});

        resizeExportArea();
      }

      function getNodeData(data) {
        var networkNodes = [];

        data.forEach(function (elem, index, array) {
          networkNodes.push({
            id: elem.id,
            label: elem.id,
            x: elem.x,
            y: elem.y,
          });
        });

        return new vis.DataSet(networkNodes);
      }

      function getNodeById(data, id) {
        for (var n = 0; n < data.length; n++) {
          if (data[n].id == id) {
            // double equals since id can be numeric or string
            return data[n];
          }
        }

        throw "Can not find id '" + id + "' in data";
      }

      function getEdgeData(data) {
        var networkEdges = [];

        data.forEach(function (node) {
          // add the connection
          node.connections.forEach(function (connId, cIndex, conns) {
            networkEdges.push({ from: node.id, to: connId });
            let cNode = getNodeById(data, connId);

            var elementConnections = cNode.connections;

            // remove the connection from the other node to prevent duplicate connections
            var duplicateIndex = elementConnections.findIndex(function (
              connection
            ) {
              return connection == node.id; // double equals since id can be numeric or string
            });

            if (duplicateIndex != -1) {
              elementConnections.splice(duplicateIndex, 1);
            }
          });
        });

        return new vis.DataSet(networkEdges);
      }

      function objectToArray(obj) {
        return Object.keys(obj).map(function (key) {
          obj[key].id = key;
          return obj[key];
        });
      }

      function resizeExportArea() {
        exportArea.style.height = 1 + exportArea.scrollHeight + "px";
      }

      function loadJSON(path, success, error) {
          const xhr = new XMLHttpRequest();
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                success(JSON.parse(xhr.responseText));
              } else {
                error(xhr);
              }
            }
          };
          xhr.open("GET", path, true);
          xhr.send();
        }

    function getScaleFreeNetwork(nodeCount) {
        const nodes = [];
        const edges = [];
        const connectionCount = [];

        // randomly create some nodes and edges
        for (let i = 0; i < nodeCount; i++) {
        nodes.push({
            id: i,
            label: String(i),
        });

        connectionCount[i] = 0;

        // create edges in a scale-free-network way
        if (i == 1) {
            const from = i;
            const to = 0;
            edges.push({
            from: from,
            to: to,
            });
            connectionCount[from]++;
            connectionCount[to]++;
        } else if (i > 1) {
            const conn = edges.length * 2;
            const rand = Math.floor(seededRandom() * conn);
            let cum = 0;
            let j = 0;
            while (j < connectionCount.length && cum < rand) {
            cum += connectionCount[j];
            j++;
            }

            const from = i;
            const to = j;
            edges.push({
            from: from,
            to: to,
            });
            connectionCount[from]++;
            connectionCount[to]++;
        }
        }

        return { nodes: nodes, edges: edges };
    }

    seededRandom = Alea("SEED");

    function getScaleFreeNetworkSeeded(nodeCount) {
        const nodes = [];
        const edges = [];
        const connectionCount = [];
        let edgesId = 0;

        // randomly create some nodes and edges
        for (let i = 0; i < nodeCount; i++) {
        nodes.push({
            id: i,
            label: String(i),
        });

        connectionCount[i] = 0;

        // create edges in a scale-free-network way
        if (i == 1) {
            const from = i;
            const to = 0;
            edges.push({
            id: edgesId++,
            from: from,
            to: to,
            });
            connectionCount[from]++;
            connectionCount[to]++;
        } else if (i > 1) {
            const conn = edges.length * 2;
            const rand = Math.floor(seededRandom() * conn);
            let cum = 0;
            let j = 0;
            while (j < connectionCount.length && cum < rand) {
            cum += connectionCount[j];
            j++;
            }

            const from = i;
            const to = j;
            edges.push({
            id: edgesId++,
            from: from,
            to: to,
            });
            connectionCount[from]++;
            connectionCount[to]++;
        }
        }

        return { nodes: nodes, edges: edges };
    }

      init();
    </script>
</body>
</html>