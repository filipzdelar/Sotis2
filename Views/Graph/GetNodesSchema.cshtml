@page
@model Sotis2.Models.Graph.DTO.GraphDTO
@{
//ViewData["Title"] = "Home page";
//Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        color: #d3d3d3;
        font: 12pt arial;
        background-color: #ffffff;
    }

    #mynetwork {
        width: 800px;
        height: 800px;
        background-color: #fff;
    }
</style>


<div id="mynetwork"></div>
<button onclick="https://localhost:5001/api/graph/display">Load the graph</button>

<script type="text/javascript">




    var container;
    var dataf;
    var options;
    var network;
                    var nodes;
                    var clickedNodeId = null;




    fetch('/api/graph/display') //./schema
        .then((response) => {
            // Now process the JSON:
            response.json().then((data) => {

                // Log the data :  api/graph/
                console.log(data);

                nodes = data['nodes'];
                dataf = data;

                //data['nodes'] = new vis.DataSet(data['nodes']);
                for (i = 0; i < data['edges'].length; i++) {
                    data["edges"][i]["color"] = { color: "blue" }
                }
                // Now display the graph using vis.js:
                var options = {
                    edges: {
                        arrows: {
                            to: { enabled: true },
                            from: { enabled: false }
                        }
                    },
                    manipulation: {
                        enabled: false,
                        addNode: function (data, callback) {
                            // filling in the popup DOM elements
                            console.log('add', data);
                        },
                        editNode: function (data, callback) {
                            // filling in the popup DOM elements
                            console.log('edit', data);
                        },
                        addEdge: function (data, callback) {
                            console.log('add edge', data);
                            if (data.from == data.to) {
                                var r = confirm("Do you want to connect the node to itself?");
                                if (r === true) {
                                    callback(data);
                                }
                            }
                            else {
                                callback(data);
                            }
                            // after each adding you will be back to addEdge mode
                            network.addEdgeMode();
                        }
                    }
                };

                var container = document.getElementById('mynetwork');

                for (i = 0; i < dataf['nodes'].length; i++) { //
                    if (i < 8) {
                        dataf['nodes'][i]["shape"] = "square";
                    }
                    else {
                        dataf['nodes'][i]["shape"] = "ellipse";

                    }
                }

                network = new vis.Network(container, data, options);
                // var network = new vis.Network(container, data, dsoptions);

                // here you init the addEdge mode
                network.addEdgeMode();


                alert(network);
                /*
                network.on("doubleClick", function (params) {
                    var ids = params.nodes;
                    //network.body.data.edges.add([{ from: clickedNodeId, to: ids }]);
                    alert(dataf['edges']);
                    dataf['edges'] += ({ from: clickedNodeId, id: 123, label: "", to: ids });

                    var options = {
                        
                    };

                    var container = document.getElementById('mynetwork');

                    network = new vis.Network(container, dataf, options);
                });

                network.on('click', function (params) {
                    var ids = params.nodes;
                    if (clickedNodeId == null)
                    {
                        alert("Ok?");
                        clickedNodeId = ids;
                    }
                    else {
                        alert(clickedNodeId);
                        alert(ids);
                        //network.body.data.edges.add([{ from: clickedNodeId, to: ids }]);
                        alert(dataf['edges'][0]);
                        //dataf['edges'].push({ from: clickedNodeId, id: 123, label: "", to: ids });

                        var container = document.getElementById('mynetwork');
                        var dsoptions = {
                            manipulation: {
                                enabled: false,
                                addNode: function (data, callback) {
                                    // filling in the popup DOM elements
                                    console.log('add', data);
                                },
                                editNode: function (data, callback) {
                                    // filling in the popup DOM elements
                                    console.log('edit', data);
                                },
                                addEdge: function (data, callback) {
                                    console.log('add edge', data);
                                    if (data.from == data.to) {
                                        var r = confirm("Do you want to connect the node to itself?");
                                        if (r === true) {
                                            callback(data);
                                        }
                                    }
                                    else {
                                        callback(data);
                                    }
                                    // after each adding you will be back to addEdge mode
                                    network.addEdgeMode();
                                }
                            }
                        };




                        alert("Dodato");
                        clickedNodeId = null;

                    }*/
                    /*alert(nodes);
                    var clickedNode;
                    for (var i = 0; i < nodes.length; i++) {
                        if (nodes[i]['id'] == ids)
                        {
                            alert("Found");
                            clickedNode = nodes[i];
                            break;
                        }
                    }
                    network.editNode();
                    */
                    //network.body.data.edges.add([{ from: from_id, to: to_id }])
                    /*
                    if ((params.nodes.length == 0) && (params.edges.length == 0)) {
                        var updatedIds = nodes.add([{
                            label: 'new',
                            x: params.pointer.canvas.x,
                            y: params.pointer.canvas.y
                        }]);
                        network.selectNodes([updatedIds[0]]);
                        network.editNode();
                    }*/
                //})
            });
        })
        .catch((err) => {
            alert("Fetching Graph Schema Failed: " + err);
        });

    //var network = new vis.Network(container, data, options);



</script>