@page
@model Sotis2.Models.Graph.DTO.GraphDTO
@{

    //@model Sotis2.Models.Graph.DTO.GraphDTO
    //ViewData["Title"] = "Home page";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    //var idd = ViewContext.RouteData.Values["id"];


    //var t = Model;
    //var p = Model.testID;
    /*
    <h1 id="tid">


        {}
        @if (@Model != null)
        {@Model.Nodes.Count();

    }
    else { Console.WriteLine("smth"); }
    </h1>*/
}

<div id="id_test"> @Html.DisplayNameFor(model => model.testID)</div>
<style>
    body {
        color: #d3d3d3;
        font: 12pt arial;
        background-color: #ffffff;
    }

    #mynetwork {
        width: 800px;
        height: 800px;
        background-color: #fff;
    }
</style>


<div id="mynetwork"></div>
<button onclick="https://localhost:5001/api/graph/display">Load the graph</button>
<button onclick="addMode()">Change Edges</button>

<script type="text/javascript">




    var container;
    var dataf;
    var options;
    var network;
    var nodes;
    var clickedNodeId = null;


    function addMode() {
        alert("Edge changer");
        network.addEdgeMode();
    }

    function handleGetJson() {
        const urlParams = new URLSearchParams(window.location.search);
        //const myParam = urlParams.get('id_test');
        var x = document.getElementById("id_test").textContent;
        fetch('/api/graph?id=' + x.toString()) //../schema
            .then((response) => {
                // Now process the JSON:
                //console(response.text);
                window.alert(response)
                response.json().then((data) => {
                    // Log the data :  api/graph/
                    console.log(data);

                    nodes = data['nodes'];
                    dataf = data;

                    data['nodes'] = new vis.DataSet(data['nodes']);
                    // Now display the graph using vis.js:
                    var options = {
                        edges: {
                            arrows: {
                                to: { enabled: true },
                                from: { enabled: false }
                            }
                        },
                        manipulation: {
                            enabled: false,
                            addNode: function (data, callback) {
                                // filling in the popup DOM elements
                                console.log('add', data);
                            },
                            editNode: function (data, callback) {
                                // filling in the popup DOM elements
                                console.log('edit', data);
                            },
                            addEdge: function (data, callback) {
                                console.log('add edge', data);
                                if (data.from == data.to) {
                                    var r = confirm("Do you want to connect the node to itself?");
                                    if (r === true) {
                                        callback(data);
                                    }
                                }
                                else {
                                    callback(data);
                                }
                                // after each adding you will be back to addEdge mode

                            }
                        }
                    };

                    var container = document.getElementById('mynetwork');

                    network = new vis.Network(container, data, options);
                    // var network = new vis.Network(container, data, dsoptions);

                    // here you init the addEdge mode




                });
            })
            .catch((err) => {
                alert("Fetching Graph Schema Failed: " + err);
            });
    }

    handleGetJson();
    //var network = new vis.Network(container, data, options);



</script>