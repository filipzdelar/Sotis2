@page
@model Sotis2.Models.Graph.DTO.GraphDTO
@{

    //@model Sotis2.Models.Graph.DTO.GraphDTO
    //ViewData["Title"] = "Home page";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    //var idd = ViewContext.RouteData.Values["id"];


    //var t = Model;
    //var p = Model.testID;
    /*
    <h1 id="tid">


        {}
        @if (@Model != null)
        {@Model.Nodes.Count();

    }
    else { Console.WriteLine("smth"); }
    </h1>*/
}

<div id="id_test"> @Html.ValueFor(model => model.testID)</div>
<style>
    body {
        color: #d3d3d3;
        font: 12pt arial;
        background-color: #ffffff;
    }

    #mynetwork {
        width: 800px;
        height: 800px;
        background-color: #fff;
    }
</style>


<div id="mynetwork"></div>
<button onclick="https://localhost:5001/api/graph/display">Load the graph</button>
<button onclick="addMode()">Change Edges</button>
<input type="button"
       id="export_button"
       onclick="exportNetwork()"
       value="export" />

<button onclick="https://localhost:5001/api/graph/clear">Clear</button>

<script type="text/javascript">

    function init() {
        exportButton = document.getElementById("export_button");
    }

    var container;
    var dataf;
    var options;
    var network;
    var nodes;
    var clickedNodeId = null;


    function addMode() {
        alert("Edge changer");
        network.addEdgeMode();
    }

    //function handleGetJson() {
        //const urlParams = new URLSearchParams(window.location.search);
        //const myParam = urlParams.get('id_test');
    var x = document.getElementById("id_test").textContent;
    //alert(x.toString());
        fetch('/api/graph/test?id=' + x.toString()) //../schema
            .then((response) => {
                // Now process the JSON:
                //console(response.text);
                window.alert(response)
                response.json().then((data) => {
                    // Log the data :  api/graph/
                    console.log(data);
                    //alert(data);
                    nodes = data['nodes'];
                    dataf = data;

                    //data['nodes'] = new vis.DataSet(data['nodes']);
                    for (i = 0; i < data['edges'].length; i++) {
                        data["edges"][i]["color"] = { color: "blue" }
                    }
                    // Now display the graph using vis.js:
                    var options = {
                        edges: {
                            arrows: {
                                to: { enabled: true },
                                from: { enabled: false }
                            }
                        },
                        manipulation: {
                            enabled: false,
                            addNode: function (data, callback) {
                                // filling in the popup DOM elements
                                console.log('add', data);
                            },
                            editNode: function (data, callback) {
                                // filling in the popup DOM elements
                                console.log('edit', data);
                            },
                            addEdge: function (data, callback) {
                                console.log('add edge', data);
                                if (data.from == data.to) {
                                    var r = confirm("Do you want to connect the node to itself?");
                                    if (r === true) {
                                        callback(data);
                                    }
                                }
                                else {
                                    callback(data);
                                }
                            }
                        }
                    };
                    var container = document.getElementById('mynetwork');
                    //alert(dataf['nodes'][i]);
                    for (i = 0; i < dataf['nodes'].length; i++) { //
                        if (i < 8) {
                            dataf['nodes'][i]["shape"] = "square";
                        }
                        else {
                            dataf['nodes'][i]["shape"] = "ellipse";

                        }
                    }
                    network = new vis.Network(container, data, options);

                });
            })
            .catch((err) => {
                alert("Fetching Graph Schema Failed: " + err);
            });

    function exportNetwork() {

        var nodes = objectToArray(network.getPositions());

        nodes.forEach(addConnections);


        // pretty print node data
        var exportValue = JSON.stringify(nodes, undefined, 2);

        fetch('/api/graph/save/' + exportValue) //./schema
            .then((response) => {
                alert("Saved graph");
            });

    }

    function objectToArray(obj) {
        return Object.keys(obj).map(function (key) {
            obj[key].id = key;
            return obj[key];
        });
    }

    function addConnections(elem, index) {
        // need to replace this with a tree of the network, then get child direct children of the element
        elem.connections = network.getConnectedNodes(elem['id'], "from");
    }

    init();

    //var network = new vis.Network(container, data, options);



</script>